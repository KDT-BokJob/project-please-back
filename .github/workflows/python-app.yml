# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application
env:
  APP_NAME: ${{ secrets.DOCKERHUB_FLASK_REPO }}/please-server
on:
  push:
    branches: ["main", "dev-flask"]
  pull_request:
    branches: ["main", "dev-flask"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          cd flask
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     pytest
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_FLASK_USERNAME }}
          password: ${{ secrets.DOCKERHUB_FLASK_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build -t ${{ env.APP_NAME }} ./flask
          docker tag ${{ env.APP_NAME }}:latest ${{ env.APP_NAME }}:latest
      - name: Push Docker image
        run: |
          docker push ${{ env.APP_NAME }}:latest

      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/please-server
            docker-compose -f ~/project-please-back/docker-compose.yml up -d
            docker image prune -f
